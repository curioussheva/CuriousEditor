import React, { useState } from 'react';
import { 
  View, 
  TouchableOpacity, 
  Text, 
  StyleSheet, 
  ScrollView,
  Modal
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { EditorRef } from './RichTextEditor';
import { useTheme } from '../contexts/ThemeContext';

interface EnhancedToolbarProps {
  editorRef: React.RefObject<any>;
  onInsertLink: () => void;
  onInsertImage: () => void;
  onNewDocument: () => void;
  onOpenTerminal?: () => void;
  onOpenAXS?: () => void; // Add this
}


interface EnhancedToolbarProps {
  editorRef: React.RefObject<EditorRef>;
  onInsertLink: () => void;
  onInsertImage: () => void;
  onNewDocument: () => void;
  onInsertTable?: () => void;
  onInsertCode?: () => void;
}

const EnhancedToolbar: React.FC<EnhancedToolbarProps> = ({ 
  editorRef, 
  onInsertLink, 
  onInsertImage,
  onNewDocument,
  onInsertTable,
  onInsertCode
}) => {
  const { colors } = useTheme();
  const [showCodeModal, setShowCodeModal] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState('javascript');

  const handleFormat = (command: string, value: string | null = null) => {
    editorRef.current?.formatText(command, value);
  };

  const programmingLanguages = [
    'javascript', 'typescript', 'python', 'java', 'cpp', 'csharp',
    'php', 'ruby', 'swift', 'kotlin', 'go', 'rust', 'html', 'css',
    'sql', 'json', 'xml', 'markdown', 'bash'
  ];

  const ToolbarButton: React.FC<{
    icon: string;
    onPress: () => void;
    isActive?: boolean;
    title?: string;
  }> = ({ icon, onPress, isActive = false, title }) => (
    <TouchableOpacity 
      style={[styles.toolbarButton, isActive && styles.activeButton, { 
        backgroundColor: colors.surface, 
        borderColor: colors.border 
      }]} 
      onPress={onPress}
    >
      <Text style={[styles.toolbarButtonText, isActive && styles.activeButtonText, { color: colors.text }]}>
        {icon}
      </Text>
      {title && <Text style={[styles.buttonTitle, { color: colors.textSecondary }]}>{title}</Text>}
    </TouchableOpacity>
  );

  const IconToolbarButton: React.FC<{
    iconName: any;
    onPress: () => void;
    isActive?: boolean;
    title?: string;
  }> = ({ iconName, onPress, isActive = false, title }) => (
    <TouchableOpacity 
      style={[styles.toolbarButton, isActive && styles.activeButton, { 
        backgroundColor: colors.surface, 
        borderColor: colors.border 
      }]} 
      onPress={onPress}
    >
      <Ionicons name={iconName} size={20} color={isActive ? colors.primary : colors.text} />
      {title && <Text style={[styles.buttonTitle, { color: colors.textSecondary }]}>{title}</Text>}
    </TouchableOpacity>
  );

  const handleInsertCode = (language: string) => {
    editorRef.current?.insertCode(language);
    setShowCodeModal(false);
  };

  return (
    <>
      <ScrollView 
        horizontal 
        showsHorizontalScrollIndicator={false}
        style={[styles.toolbar, { backgroundColor: colors.surface, borderBottomColor: colors.border }]}
        contentContainerStyle={styles.toolbarContent}
      >
        {/* File Actions */}
        <IconToolbarButton 
          iconName="add" 
          onPress={onNewDocument}
          title="New"
        />
        
        <View style={[styles.separator, { backgroundColor: colors.border }]} />
        
        {/* Undo/Redo */}
        <IconToolbarButton 
          iconName="arrow-undo" 
          onPress={() => handleFormat('undo')}
          title="Undo"
        />
        <IconToolbarButton 
          iconName="arrow-redo" 
          onPress={() => handleFormat('redo')}
          title="Redo"
        />
        
        <View style={[styles.separator, { backgroundColor: colors.border }]} />
        
        {/* Text Formatting */}
        <ToolbarButton icon="B" onPress={() => handleFormat('bold')} title="Bold" />
        <ToolbarButton icon="I" onPress={() => handleFormat('italic')} title="Italic" />
        <ToolbarButton icon="U" onPress={() => handleFormat('underline')} title="Underline" />
        <ToolbarButton icon="S" onPress={() => handleFormat('strikeThrough')} title="Strike" />
        
        <View style={[styles.separator, { backgroundColor: colors.border }]} />
        
        {/* Headers */}
        <ToolbarButton icon="H1" onPress={() => handleFormat('formatBlock', '<h1>')} title="H1" />
        <ToolbarButton icon="H2" onPress={() => handleFormat('formatBlock', '<h2>')} title="H2" />
        <ToolbarButton icon="H3" onPress={() => handleFormat('formatBlock', '<h3>')} title="H3" />
        
        <View style={[styles.separator, { backgroundColor: colors.border }]} />
        
{/* Lists */}
<IconToolbarButton 
  iconName="list" 
  onPress={() => handleFormat('insertUnorderedList')}
  title="List"
/>
<IconToolbarButton 
  iconName="list-outline" 
  onPress={() => handleFormat('insertOrderedList')}
  title="Numbered"
/>

<View style={[styles.separator, { backgroundColor: colors.border }]} />

      {/* Alignment */}
      <ToolbarButton icon="⫷" onPress={() => handleFormat('justifyLeft')} />
     <ToolbarButton icon="☰" onPress={() => handleFormat('justifyCenter')} />
      <ToolbarButton icon="⫸" onPress={() => handleFormat('justifyRight')} />
 

<View style={[styles.separator, { backgroundColor: colors.border }]} />

{/* Indentation */}
<IconToolbarButton 
  iconName="arrow-forward" 
  onPress={() => handleFormat('indent')}
  title="Indent"
/>
<IconToolbarButton 
  iconName="arrow-back" 
  onPress={() => handleFormat('outdent')}
  title="Outdent"
/>

<View style={[styles.separator, { backgroundColor: colors.border }]} />

{/* Media */}
<IconToolbarButton 
  iconName="link" 
  onPress={onInsertLink}
  title="Link"
/>
<IconToolbarButton 
  iconName="image" 
  onPress={onInsertImage}
  title="Image"
/>
<IconToolbarButton 
  iconName="grid" 
  onPress={() => onInsertTable ? onInsertTable() : editorRef.current?.insertTable()}
  title="Table"
/>

<View style={[styles.separator, { backgroundColor: colors.border }]} />

{/* Code & Special Formats */}
<IconToolbarButton 
  iconName="code" 
  onPress={() => setShowCodeModal(true)}
  title="Code"
/>
      <ToolbarButton icon="❝" onPress={() => handleFormat('formatBlock', '<blockquote>')} />
      </ScrollView>
      
       {/* Terminal */}
      <ToolbarButton icon="❝" onPress={onOpenAXS} />
      <View style={styles.separator} />

      {/* Code Language Selection Modal */}
      <Modal visible={showCodeModal} animationType="slide" transparent>
        <View style={styles.modalContainer}>
          <View style={[styles.modalContent, { backgroundColor: colors.surface }]}>
            <Text style={[styles.modalTitle, { color: colors.text }]}>Insert Code Block</Text>
            <Text style={[styles.modalSubtitle, { color: colors.textSecondary }]}>Select programming language:</Text>
            
            <ScrollView style={styles.languageList}>
              {programmingLanguages.map((language) => (
                <TouchableOpacity
                  key={language}
                  style={[
                    styles.languageItem,
                    { borderBottomColor: colors.border },
                    selectedLanguage === language && [styles.selectedLanguageItem, { backgroundColor: colors.primary }]
                  ]}
                  onPress={() => handleInsertCode(language)}
                >
                  <Text style={[
                    styles.languageText,
                    { color: colors.text },
                    selectedLanguage === language && styles.selectedLanguageText
                  ]}>
                    {language.toUpperCase()}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
            
            <View style={styles.modalButtons}>
              <TouchableOpacity 
                style={[styles.modalButton, { backgroundColor: colors.textSecondary }]}
                onPress={() => setShowCodeModal(false)}
              >
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </>
  );
};

const styles = StyleSheet.create({
  toolbar: {
    borderBottomWidth: 1,
    maxHeight: 70,
  },
  toolbarContent: {
    alignItems: 'center',
    paddingHorizontal: 8,
  },
  toolbarButton: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    marginHorizontal: 4,
    borderRadius: 6,
    borderWidth: 1,
    minWidth: 50,
    alignItems: 'center',
    justifyContent: 'center',
  },
  activeButton: {
    borderColor: '#007AFF',
  },
  toolbarButtonText: {
    fontSize: 14,
    fontWeight: 'bold',
  },
  activeButtonText: {
    color: '#ffffff',
  },
  buttonTitle: {
    fontSize: 10,
    marginTop: 2,
  },
  separator: {
    width: 1,
    height: 30,
    marginHorizontal: 6,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    padding: 24,
    borderRadius: 12,
    width: '90%',
    maxHeight: '80%',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
    textAlign: 'center',
  },
  modalSubtitle: {
    fontSize: 14,
    marginBottom: 16,
    textAlign: 'center',
  },
  languageList: {
    maxHeight: 300,
    marginBottom: 16,
  },
  languageItem: {
    padding: 12,
    borderBottomWidth: 1,
  },
  selectedLanguageItem: {
    borderRadius: 6,
  },
  languageText: {
    fontSize: 16,
  },
  selectedLanguageText: {
    color: 'white',
    fontWeight: '600',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'center',
  },
  modalButton: {
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 8,
    minWidth: 100,
    alignItems: 'center',
  },
  cancelButtonText: {
    color: 'white',
    fontWeight: '600',
  },
});

export default EnhancedToolbar;

